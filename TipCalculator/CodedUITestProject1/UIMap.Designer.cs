// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIAmountEdit = this.UITipCalculatorWindow.UIAmountWindow.UIAmountEdit;
            WinEdit uITipEdit = this.UITipCalculatorWindow.UITipWindow.UITipEdit;
            WinButton uICalculateButton = this.UITipCalculatorWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Type '100' in 'amount' text box
            uIAmountEdit.Text = this.RecordedMethod1Params.UIAmountEditText;

            // Type '15' in 'tip' text box
            uITipEdit.Text = this.RecordedMethod1Params.UITipEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(107, 11));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITotalEdit = this.UITipCalculatorWindow.UITotalWindow.UITotalEdit;
            #endregion

            // Verify that the 'Text' property of 'total' text box equals '115'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITotalEditText, uITotalEdit.Text);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UITipCalculatorWindow UITipCalculatorWindow
        {
            get
            {
                if ((this.mUITipCalculatorWindow == null))
                {
                    this.mUITipCalculatorWindow = new UITipCalculatorWindow();
                }
                return this.mUITipCalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UITipCalculatorWindow mUITipCalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '100' in 'amount' text box
        /// </summary>
        public string UIAmountEditText = "100";
        
        /// <summary>
        /// Type '15' in 'tip' text box
        /// </summary>
        public string UITipEditText = "15";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'total' text box equals '115'
        /// </summary>
        public string UITotalEditText = "115";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITipCalculatorWindow : WinWindow
    {
        
        public UITipCalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tip Calculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public UIAmountWindow UIAmountWindow
        {
            get
            {
                if ((this.mUIAmountWindow == null))
                {
                    this.mUIAmountWindow = new UIAmountWindow(this);
                }
                return this.mUIAmountWindow;
            }
        }
        
        public UITipWindow UITipWindow
        {
            get
            {
                if ((this.mUITipWindow == null))
                {
                    this.mUITipWindow = new UITipWindow(this);
                }
                return this.mUITipWindow;
            }
        }
        
        public UICalculateWindow UICalculateWindow
        {
            get
            {
                if ((this.mUICalculateWindow == null))
                {
                    this.mUICalculateWindow = new UICalculateWindow(this);
                }
                return this.mUICalculateWindow;
            }
        }
        
        public UITotalWindow UITotalWindow
        {
            get
            {
                if ((this.mUITotalWindow == null))
                {
                    this.mUITotalWindow = new UITotalWindow(this);
                }
                return this.mUITotalWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAmountWindow mUIAmountWindow;
        
        private UITipWindow mUITipWindow;
        
        private UICalculateWindow mUICalculateWindow;
        
        private UITotalWindow mUITotalWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAmountWindow : WinWindow
    {
        
        public UIAmountWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "amount";
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAmountEdit
        {
            get
            {
                if ((this.mUIAmountEdit == null))
                {
                    this.mUIAmountEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAmountEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Amount";
                    this.mUIAmountEdit.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUIAmountEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAmountEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITipWindow : WinWindow
    {
        
        public UITipWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "tip";
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITipEdit
        {
            get
            {
                if ((this.mUITipEdit == null))
                {
                    this.mUITipEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITipEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Tip %";
                    this.mUITipEdit.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUITipEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITipEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICalculateWindow : WinWindow
    {
        
        public UICalculateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "calcButton";
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mUICalculateButton.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UITotalWindow : WinWindow
    {
        
        public UITotalWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "total";
            this.WindowTitles.Add("Tip Calculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITotalEdit
        {
            get
            {
                if ((this.mUITotalEdit == null))
                {
                    this.mUITotalEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITotalEdit.WindowTitles.Add("Tip Calculator");
                    #endregion
                }
                return this.mUITotalEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITotalEdit;
        #endregion
    }
}
