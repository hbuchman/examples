// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace FactorialTester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIValueOfNEdit = this.UIAsyncMethodsWindow.UIValueOfNWindow.UIValueOfNEdit;
            WinButton uISychronousnButton = this.UIAsyncMethodsWindow.UISychronousnWindow.UISychronousnButton;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\examples\VariousExamples\AsyncMethods\bin\Debug\AsyncMethods.exe'
            ApplicationUnderTest uIAsyncMethodsWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIAsyncMethodsWindowExePath, this.RecordedMethod1Params.UIAsyncMethodsWindowAlternateExePath);

            // Type '5' in 'valueOfN' text box
            uIValueOfNEdit.Text = this.RecordedMethod1Params.UIValueOfNEditText;

            // Click 'Sychronous n!' button
            Mouse.Click(uISychronousnButton, new Point(67, 8));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIFactorialBoxEdit = this.UIAsyncMethodsWindow.UIFactorialBoxWindow.UIFactorialBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'factorialBox' text box equals '120'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIFactorialBoxEditText, uIFactorialBoxEdit.Text, "5! computed wrong");
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uIValueOfNEdit = this.UIAsyncMethodsWindow.UIValueOfNWindow.UIValueOfNEdit;
            WinButton uIAsynchronousnButton = this.UIAsyncMethodsWindow.UIAsynchronousnWindow.UIAsynchronousnButton;
            #endregion

            // Type '10' in 'valueOfN' text box
            uIValueOfNEdit.Text = this.RecordedMethod2Params.UIValueOfNEditText;

            // Click 'Asynchronous n!' button
            Mouse.Click(uIAsynchronousnButton, new Point(33, 16));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIFactorialBoxEdit = this.UIAsyncMethodsWindow.UIFactorialBoxWindow.UIFactorialBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'factorialBox' text box equals '3628800'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIFactorialBoxEditText, uIFactorialBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIAsyncMethodsWindow.UIAsyncMethodsTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 6));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UIAsyncMethodsWindow UIAsyncMethodsWindow
        {
            get
            {
                if ((this.mUIAsyncMethodsWindow == null))
                {
                    this.mUIAsyncMethodsWindow = new UIAsyncMethodsWindow();
                }
                return this.mUIAsyncMethodsWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UIAsyncMethodsWindow mUIAsyncMethodsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\examples\VariousExamples\AsyncMethods\bin\Debug\AsyncMethods.exe'
        /// </summary>
        public string UIAsyncMethodsWindowExePath = "C:\\Users\\zachary\\Source\\Repos\\examples\\VariousExamples\\AsyncMethods\\bin\\Debug\\Asy" +
            "ncMethods.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\examples\VariousExamples\AsyncMethods\bin\Debug\AsyncMethods.exe'
        /// </summary>
        public string UIAsyncMethodsWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\examples\\VariousExamples\\AsyncMethods\\bin\\Debug\\AsyncM" +
            "ethods.exe";
        
        /// <summary>
        /// Type '5' in 'valueOfN' text box
        /// </summary>
        public string UIValueOfNEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'factorialBox' text box equals '120'
        /// </summary>
        public string UIFactorialBoxEditText = "120";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '10' in 'valueOfN' text box
        /// </summary>
        public string UIValueOfNEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'factorialBox' text box equals '3628800'
        /// </summary>
        public string UIFactorialBoxEditText = "3628800";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAsyncMethodsWindow : WinWindow
    {
        
        public UIAsyncMethodsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Async Methods";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public UIValueOfNWindow UIValueOfNWindow
        {
            get
            {
                if ((this.mUIValueOfNWindow == null))
                {
                    this.mUIValueOfNWindow = new UIValueOfNWindow(this);
                }
                return this.mUIValueOfNWindow;
            }
        }
        
        public UISychronousnWindow UISychronousnWindow
        {
            get
            {
                if ((this.mUISychronousnWindow == null))
                {
                    this.mUISychronousnWindow = new UISychronousnWindow(this);
                }
                return this.mUISychronousnWindow;
            }
        }
        
        public UIFactorialBoxWindow UIFactorialBoxWindow
        {
            get
            {
                if ((this.mUIFactorialBoxWindow == null))
                {
                    this.mUIFactorialBoxWindow = new UIFactorialBoxWindow(this);
                }
                return this.mUIFactorialBoxWindow;
            }
        }
        
        public UIAsynchronousnWindow UIAsynchronousnWindow
        {
            get
            {
                if ((this.mUIAsynchronousnWindow == null))
                {
                    this.mUIAsynchronousnWindow = new UIAsynchronousnWindow(this);
                }
                return this.mUIAsynchronousnWindow;
            }
        }
        
        public UIAsyncMethodsTitleBar UIAsyncMethodsTitleBar
        {
            get
            {
                if ((this.mUIAsyncMethodsTitleBar == null))
                {
                    this.mUIAsyncMethodsTitleBar = new UIAsyncMethodsTitleBar(this);
                }
                return this.mUIAsyncMethodsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIValueOfNWindow mUIValueOfNWindow;
        
        private UISychronousnWindow mUISychronousnWindow;
        
        private UIFactorialBoxWindow mUIFactorialBoxWindow;
        
        private UIAsynchronousnWindow mUIAsynchronousnWindow;
        
        private UIAsyncMethodsTitleBar mUIAsyncMethodsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIValueOfNWindow : WinWindow
    {
        
        public UIValueOfNWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueOfN";
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueOfNEdit
        {
            get
            {
                if ((this.mUIValueOfNEdit == null))
                {
                    this.mUIValueOfNEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueOfNEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value of n";
                    this.mUIValueOfNEdit.WindowTitles.Add("Async Methods");
                    #endregion
                }
                return this.mUIValueOfNEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueOfNEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISychronousnWindow : WinWindow
    {
        
        public UISychronousnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public WinButton UISychronousnButton
        {
            get
            {
                if ((this.mUISychronousnButton == null))
                {
                    this.mUISychronousnButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISychronousnButton.SearchProperties[WinButton.PropertyNames.Name] = "Sychronous n!";
                    this.mUISychronousnButton.WindowTitles.Add("Async Methods");
                    #endregion
                }
                return this.mUISychronousnButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISychronousnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIFactorialBoxWindow : WinWindow
    {
        
        public UIFactorialBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "factorialBox";
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFactorialBoxEdit
        {
            get
            {
                if ((this.mUIFactorialBoxEdit == null))
                {
                    this.mUIFactorialBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFactorialBoxEdit.WindowTitles.Add("Async Methods");
                    #endregion
                }
                return this.mUIFactorialBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFactorialBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAsynchronousnWindow : WinWindow
    {
        
        public UIAsynchronousnWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button2";
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public WinButton UIAsynchronousnButton
        {
            get
            {
                if ((this.mUIAsynchronousnButton == null))
                {
                    this.mUIAsynchronousnButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAsynchronousnButton.SearchProperties[WinButton.PropertyNames.Name] = "Asynchronous n!";
                    this.mUIAsynchronousnButton.WindowTitles.Add("Async Methods");
                    #endregion
                }
                return this.mUIAsynchronousnButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAsynchronousnButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIAsyncMethodsTitleBar : WinTitleBar
    {
        
        public UIAsyncMethodsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Async Methods");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Async Methods");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
